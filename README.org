* Erica's Emacs
:PROPERTIES:
:CUSTOM_ID: ericas-emacs
:END:
A simple straight forward  /emacs.d/ with /init.el/ configuration that uses packages. No /use-package/, just
elpa, some config files and some extensions outside of elpa.

This is a semi-literate configuration. All code from the *root* and *early-packages/* folder is tangled from the
source blocks in this document. The rest of the code is in the /extensions/ and /config/ directories.
/Extensions/ is where package-less code with no home goes.  The /config/ directory has -conf.el files for
everything that needs one.

Here are some of the things that I do in and with emacs.

Coding, creative and technical writing, language learning, website publishing, tango teacher, tango DJ, musician,
time clocking, invoicing, scheduling, email, note taking, epub reading, comic reading, file managing,
and window managing.  I know I've forgotten things.

** Installation
:PROPERTIES:
:CUSTOM_ID: installation
:END:
I use Emacsn now with Chemacs2. I wouldn't want to manage my emacs the
hard way again.  Emacsn makes Chemacs2 easy.

*** Using Emacsn with Chemacs2
:PROPERTIES:
:CUSTOM_ID: emacsn---chemacs2
:END:
Go to the [[https://github.com/ericalinag/Emacsn][Emacsn]] repo and follow the directions there, this flavor of Emacs
is the default and one of many to choose from. Emacsn allows us install along
side other configurations, and to also keep dev, stable and test images,
of our Emacs.

*** Emacs.d - Clone -> ~/.emacs.d The hard way ???
:PROPERTIES:
:CUSTOM_ID: clone---.emacs.d-the-hard-way
:END:
It is not hard at all.
You can also just clone this into your /.emacs.d/ directory.

#+begin_example
  `git clone https://github.com/erica-linag/ericas-emacs.git ~/.emacs.d`
#+end_example

It is only necessary to run emacs after that.  There are scripts
which can be run for automation if desired.


*** The Appearance

The appearance is largely controlled in *config/appearance.el*. If you need
to adjust the font size or other things that is where you will find them.

The theme can be changed below, in /init.el/.

*** The Makefile

Emacsn took all the responsibilities away from this Makefile.
Using Emacsn or git clone into /emacs.d/ is all that is required.

The only thing left is the sample /.mbsyncrc/ file.

Just running =make= will copy it to your home directory.

#+begin_src makefile :tangle ./Makefile

# get an example mbsync rc
.PHONY: mbsync
mbsync:
	cp mbsyncrc ~/.mbsyncrc

all: mbsync
#+end_src

** The big things;
:PROPERTIES:
:CUSTOM_ID: the-big-things
:END:
I've switched to using [[https://github.com/protesilaos/modus-themes][Modus themes.]] It is so nice to have a nice new style.
I've used some form of vi emulation in emacs since version 17.
I currently use [[https://github.com/emacs-evil/evil][Evil-mode for that]]. I've used [[https://www.emacswiki.org/emacs/mu4e][Mu4e]] as my mail client for years. It's still
the best.  I have [[https://github.com/abo-abo/hydra][Lots of Hydras.]] I love them for how easily they create usable interface
to something new. They are available on evil-leader *,* or *SPC.*

I use  [[https://github.com/minad/vertico][Vertico]] and  [[https://github.com/tumashu/posframe][PosFrame]] for most of completing functions I use, I used
helm the year or two before that, ivy, ido, smex, for years before that.
Obviously I'm using  [[https://orgmode.org/][Org]], but consider myself a forever noob. Time clocking,
invoicing and notes brought me to Org, now it is invading my life.

I am writing a book in org.  I maintain 4 websites in org.

I do have some nice code that allows me to create org articles for jekyll from
sub-trees. Which is really nice way to publish to a website.

[[https://github.com/emacs-dashboard/emacs-dashboard][Dashboard]] was one of those things that I was surprised to like.   But I dont
think of it as a splash screen, I'm beginning to think of it as central command,
and that appeals to me, I want to add more. [[https://www.emacswiki.org/emacs/UndoTree][Undo-tree]] is the coolest undo ever, have to have it.
I'm still learning [[https://github.com/magnars/multiple-cursors.el][multiple cursors]] I'm more used to the vi macro way of thinking.
I've recently been using [[https://github.com/ch11ng/exwm][ Exwm]] as my window manager and [[https://github.com/nex3/perspective-el][Perspective]] to manage how
I navigate projects, tasks, buffers and windows.

I use either *QuteBrowser* or *Vimb* as my browsers and dont spend much time in them.
I'm starting to use Eww more, so Ill have to adjust for that. I really cant decide which to use
Vimb has a more difficult learning curve.  Eww is nice for stuff I want to read.

I like learning languages also. I am a native english speaker and I speak French fluently.
I use utilities like [[https://languagetool.org][Language Tool]], [[https://hunspell.github.io][hunspell dictionaries]], [[https://orgmode.org/worg/org-contrib/org-drill.html][org-drill]], google-translate,
alternative input methods and anything else I can find that will make the multilingual
learning experience better. I'm looking to add wordnik.el. Currently learning Italian.

For music I have been migrating to [[https://www.gnu.org/software/emms/][Emms]] from Jriver media center and have to decided
to develop the things I need in a player around it.  I have also begun re-exploring [[http://lilypond.org][lilypond]] for writing
music, emacs has a nice lilypond mode.

I came to Emacs as an experienced progammer. I program lots of languages,
these are the main ones. They may or may not have extended configurations from default.

- Coding
  - Elisp
  - C, C++
  - Clojure
  - Clojure script
  - Python
  - Haskell
  - Lisps - Scheme, Guile, Racket, etc.
  - markdown
  - js
  - java
  - lua
  - shell
  - awk, sed, etc.

I tend to use Emacs for everything, so beyond writing code there is all of this.

- Creative writing
- Org publishing,
  - Websites
    - org/jekyll
  - pdf
- Natural Language learning.
- Organization
- Scheduling.
- Email
- Music player, librarian.
- File manager
- Window Manager

** My package list

I keep a master package list. That is all it is. No use-package. Using vanilla
Emacs packages works with this list. Any time I install a package I wish to keep
I add it here.  Sometimes it gets a /*-conf.el/ in the /config/ directory.

From the list, I can then have update and install functions that I can use to
ensure everything is installed and up to date.

This package list is automatically tangled into early-packages/mypackages.el/.

#+begin_src emacs-lisp :tangle ./early-packages/mypackages.el
    ;;; mypackages --- A list of all the packages to keep installed.
    ;;; Commentary:
    ;; All my packages, easy to install and update.
    ;; Provides two functions, one for install, one for update.
    ;;; Code:

#+end_src

If you are new to emacs you can read about any package with C-h P.

*** UI sort of things.
Just some basic stuff for the user interface.

#+begin_src emacs-lisp :tangle ./early-packages/mypackages.el
 (defvar my/packages
  '(golden-ratio
   general
   projectile
   perspective
   find-file-in-project
   dashboard
   windower
   expand-region
   dmenu
   async
   nov
#+end_src

*** Completers, ivy, helm, vertico, ...

Choose: ido/smex or ivy/swiper/counsel or helm or vertico.

I've used pretty much all the helpers over the years, ivy, ido, smex,
helm, vertico. Currently using vertico with posframe. Configurations are
still there for the others.  I find vertico not quite as nice as helm with ag, I should
see about fixing my ag interface.

**** Vertico
#+begin_src emacs-lisp :tangle ./early-packages/mypackages.el
  vertico
  marginalia
  orderless
  consult
  embark
  embark-consult
#+end_src

**** Posframe

#+begin_src emacs-lisp :tangle ./early-packages/mypackages.el
  posframe
  vertico-posframe
  helm-posframe
  transient-posframe
  which-key-posframe
#+end_src

**** ido, smex

#+begin_src emacs-lisp :tangle ./early-packages/mypackages.el
  ;;ido ido-flx ido-imenu
  smex
#+end_src

**** Helm

#+begin_src emacs-lisp :tangle ./early-packages/mypackages.el
  ;; helm - an experiment in progess...
  helm
  helm-projectile
  helm-fish-completion
  helm-evil-markers
  helm-descbinds
  helm-swoop
  helm-org
  helm-cider
  cljr-helm

  helm-ag
  helm-sly
  helm-clojuredocs

  ;; hydra -- A lot to think about here...
  ;; https://github.com/abo-abo/hydra/wiki/Hydras-by-Topic
  ;; have to bind them, and try them, and make some.
  ;; maybe evil-leader stuff can just pop over.
  ;; maybe a few at first, that I use all the time.
  ;; ,fqgbsiaw   hmmm. don't know it's necessary...
  hydra pretty-hydra cider-hydra major-mode-hydra

  dash dash-functional
#+end_src

*** Emms Music player

I am a tango teacher and DJ I have suddenly switched over to emms.
I worked on the now defunct Songbird/Nightingale music player and I
would like to bring those features that I wrote forward to Emms in Emacs.

My Emms configuration is working with the Music Player Daemon.
I copy the mpd directory in this repo into my music directory and then link
the user default configuration file, =~./.config/mpd/mpd.conf= to the =mpd.conf= file there.

I have a perspective for Emms in my perspective hydra, available from =SPC=.
It will create an Emms perspective, start mpd, connect to mpd and start the browser and the playlist
and brings up README.org in the Music folder.

I also have a small Emms hydra attached to 'h' in the browser and playlist modes.

#+begin_src emacs-lisp :tangle ./early-packages/mypackages.el
  emms
  emms-info-mediainfo
  emms-mark-ext
  emms-soundcloud
  helm-emms
  org-emms
#+end_src

I use dired as my file manager. I like for it to look nice.

#+begin_src emacs-lisp :tangle ./early-packages/mypackages.el
  diff-hl ;; has a dired mode.

  all-the-icons
  all-the-icons-dired
  all-the-icons-completion
  all-the-icons-ibuffer

  diredfl
  dired-rsync
  fd-dired
  ranger

  ;; modeline
  ;; smart-mode-line rich-minority
  doom-modeline ;; the doom modeline

  ibuffer-projectile
  ibuffer-tramp
  ibuffer-git
#+end_src

*** Languages, translation

This is an active and changing portion of my Emacs at the moment.

I have been studying French for the last few years. I am now studying
Italian also. I am working on replacing Anki with Org drill in my routine.

I can also see that I'll probably want to add another language or two in
the future. I have a nice function to switch between input methods and
dictionaries. Ispell, flyspell, and hunspell are all working together
for spell checking. Google translate is there for highlighted text,
current word, or sentence at point and Language Tool is there to check
grammar. Take a look at the language sub-menu in /evil-leader-conf.el/
even if you are going to turn off evil-mode. Check out
/elisp/extensions/language.el/ and /elisp/config/lang-config.el/ and
/google-translate-conf.el/


#+begin_src emacs-lisp :tangle ./early-packages/mypackages.el
  ;; Multi-language support
  google-translate
  langtool
  mw-thesaurus
  powerthesaurus

#+end_src

*** Navigation, jump, misc.

Jumping, with Ace, which-key, el-get.

#+begin_src emacs-lisp :tangle ./early-packages/mypackages.el
  ;;navigation
  ace-jump-mode ace-window frog-jump-buffer ace-jump-buffer
  ;; basic tools
  which-key
  session
#+end_src

*** Exwm - The Emacs window manager.

After years of using Xmonad I find Exwm quite pleasant, and it is a very
seamless experience to let emacs do the few things I've used Xmonad for.
It has simplified my workflow and even simplified how I use Xmonad.

#+begin_src emacs-lisp :tangle ./early-packages/mypackages.el
  exwm
  helm-exwm
  exwm-mff
  perspective-exwm
#+end_src

*** Shell

I use eshell when I'm not in Urxvt.  Its strange, but cool.
multi-term used to be pretty good, trying vterm.

#+begin_src emacs-lisp :tangle ./early-packages/mypackages.el
  ;; eshell
  eshell-autojump
  fish-completion

  multi-term
  vterm
#+end_src

*** Evil, VI emulation

I've been using emacs in some sort of Vi emulation since 1995. Evil-mode
is, IMHO the best vi emulator so far. Although neovim is doing a really
good job. vimscript is an unfortunate language. You can easily turn it
off in /setup.el/ . The Evil mode setup includes a few but not all of
the Evil-mode extensions. For more information check out the
[[http://www.emacswiki.org/emacs/Evil][Evil-mode documentation.]]


#+begin_src emacs-lisp :tangle ./early-packages/mypackages.el
  ;; evil-mode
  evil
  evil-nerd-commenter
  evil-leader
  evil-mu4e
  evil-org

#+end_src

*** Parenthesis

Parenthesis are important. paredit, smart-parens, lispy, ????

#+begin_src emacs-lisp :tangle ./early-packages/mypackages.el
  ;; Parentheses.
  evil-surround
  highlight-parentheses
  ;; paredit evil-paredit
  smartparens evil-smartparens evil-cleverparens
  ;; lispy lispyville ;; -- not a fan.
  rainbow-mode
  mic-paren
#+end_src

*** Coding support

Coding requires a lot of various and never ending tools.
Heres mine.

#+begin_src emacs-lisp :tangle ./early-packages/mypackages.el
  ;; git
  magit git-gutter
  el-get
  gited

  ;;coding support
  restclient
  restclient-helm

  eldoc
  auto-compile
  company
  origami
  undo-tree
  flycheck-tip
  kibit-helper
  flycheck-pos-tip
  aggressive-indent

  ;; Silver Surfer, grep, ctags.
  ag wgrep wgrep-ag ctags-update

  ;;extras
  ;;treemacs treemacs-evil treemacs-magit treemacs-projectile
  expand-region floobits
  gist
  exec-path-from-shell

#+end_src

**** Clojure, Cider, etc.

#+begin_src emacs-lisp :tangle ./early-packages/mypackages.el
  ;; clojure -- need to rexamine this. lots of newer stuff.
  cider clj-refactor ac-cider
  cider-eval-sexp-fu
  clojure-mode eval-sexp-fu clojure-mode-extra-font-locking ;popup
  uuid rainbow-delimiters flycheck-clojure
  cider-hydra
  flycheck-clj-kondo
  4clojure

  ;; clojure script
  cljsbuild-mode smartscan

#+end_src

**** LSP-mode

#+begin_src emacs-lisp :tangle ./early-packages/mypackages.el
  lsp-mode
  lsp-treemacs
  lsp-ui

#+end_src

*** Coding languages

Programming language modes that I'm likely to use. I need to give some
attention to C, I spend a lot of time there and it is neglected.

#+begin_src emacs-lisp :tangle ./early-packages/mypackages.el
  lua-mode
  company-lua
  ruby-mode
  hy-mode

  json-mode
  markdown-mode
  yaml-mode
  apache-mode

  ;;Shell
  company-shell

  ;;C/C++
  ;; Not sure, need to pursue a better C/C++ setup
  ;;irony company-irony company-ctags helm-etags ;company-rtags

  ;;haskell
  haskell-mode
  ;;ghc
  haskell-snippets
  dante ;; GHCi
  ;;helm-ghc
  flycheck-haskell

  ;;scheme/common lisp
  geiser
  sly
  flycheck-guile
  buttercup

  ;;Python
  elpy
  pyenv-mode ein
  python-docstring
  py-autopep8
  py-yapf pydoc
  python-black

#+end_src

*** Org

Still exploring these of course. Org is never ending just like Emacs.

#+begin_src emacs-lisp :tangle ./early-packages/mypackages.el
  ;;org mode.
  org
  org-roam
  org-ref
  org-ref-prettify
  org-auto-tangle
  org-roam-timestamps
  org-roam-bibtex
  org-rich-yank
  org-pretty-tags
  org-babel-eval-in-repl
  org-bullets
  visual-fill-column
  org-cliplink
  org-drill
  org-drill-table
  ox-gfm

#+end_src

*** Emacs Applications

I tried slack, not too happy with it. I do like Eww as a browser
for somethings, and Ive been looking at discord and telegram.
On Verra

#+begin_src emacs-lisp :tangle ./early-packages/mypackages.el
  ;;slack - hasn't worked very well so far..
  slack
  oauth2
  alert
  emojify
  ;;helm-slack
#+end_src

*** Aesthetics

These are just some themes. If you need to change something it is probably in
*config/appearance-conf.el*.

#+begin_src emacs-lisp :tangle ./early-packages/mypackages.el
  ;; themes
  modus-themes
  doom-themes
  monokai-theme monokai-alt-theme obsidian-theme atom-dark-theme
  bubbleberry-theme atom-one-dark-theme
  ujelly-theme twilight-theme
  tango-2-theme tango-plus-theme tangotango-theme zenburn-theme
  waher-theme underwater-theme toxi-theme sublime-themes
  subatomic-theme sunny-day-theme subatomic256-theme
  soft-stone-theme soft-morning-theme purple-haze-theme
  noctilux-theme naquadah-theme leuven-theme lavender-theme
  light-soap-theme ir-black-theme inkpot-theme heroku-theme
  github-theme gandalf-theme flatland-theme firecode-theme
  flatui-theme espresso-theme django-theme darkmine-theme
  darcula-theme oldlace-theme cyberpunk-theme clues-theme
  busybee-theme boron-theme bliss-theme
  ample-zen-theme ample-theme lush-theme smyx-theme gotham-theme
  solarized-theme dark-krystal-theme))

#+end_src

** Package install and update functions

#+begin_src emacs-lisp :tangle ./early-packages/mypackages.el
  ;;
  ;; Install stuff from packages.

  (defun early-install-mypackages ()
    "Install a theme and any other early things."
    (dolist (pkg '(modus-themes))
      (unless (package-installed-p pkg))
      (package-install pkg)))

  (defun install-mypackages ()
    "Install my/packages if they arent already."
    (dolist (pkg my/packages)
      (unless (package-installed-p pkg))
      (package-install pkg)))

  (defun update-mypackages ()
    "Update my/packages if they need it."
    (interactive)
    (dolist (pkg my/packages)
      (package-install pkg)))
#+end_src

Thats all the packages and how I manage them.

** Set up the package archives

#+begin_src emacs-lisp :tangle ./early-packages/mypackages.el

  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/") t)
  (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))
  ;;(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)

  (package-initialize)
  (when (not package-archive-contents)
    (package-refresh-contents))

  ;; let this be controlled elsewhere.
  ;;(install-mypackages)
  ;;(update-mypackages)

  (provide 'mypackages)
  ;;; mypackages.el ends here (emacs-lisp-checkdoc)
#+end_src

** Init.el and the rest
:PROPERTIES:
:CUSTOM_ID: key-files
:END:

*** init.el - The beginning.
Set up the load paths.  Turn off cl-function warnings.
Point custom to ~/.config/emacs-custom.el.

**** The load path

- *early-packages/*, is just the packages and hints.
- *extensions/* are custom elisp code.
- *config/* is for all of the package configurations.
- *themes/* is for all of the package configurations.

#+begin_src emacs-lisp :tangle ./init.el
  ;;; init.el --- init.el for Ericas-Emacs
  ;;; Commentary:
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Set the loadpath / bytecompile everything - Go -- Eric
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; Code:
  ;; cl is obsolete, cl-lib is the replacement
  ;; Lots of current packages still use cl.
  ;; this gets rid of the warning everytime emacs starts.
  (setq byte-compile-warnings '(cl-functions))

  (setq load-path
        (append (list
                 (expand-file-name "./early-packages" user-emacs-directory)
                 (expand-file-name "./themes" user-emacs-directory)
                 (expand-file-name "./extensions" user-emacs-directory)
                 (expand-file-name "./config" user-emacs-directory))
                load-path))

  (setq custom-file "~/.config/emacs-custom.el")
  (load custom-file)
  #+end_src

**** The org and windmove clash
Org likes to take over the arrow keys. I kind of miss them, hydras help.

  #+begin_src emacs-lisp :tangle ./init.el
  ;; so org doesn't step on the S-Arrow keys from windmove.
  (setq org-replace-disputed-keys t)
  #+end_src

**** Load just enough to get a theme
Load my packages and then install enough to get a theme.

  #+begin_src emacs-lisp :tangle ./init.el
  (load "mypackages")
  (early-install-mypackages) ; make sure we have a theme
  #+end_src

**** Load the Modus theme
 Load up the Theme so we don't have to look at that stark white gnu screen
 if it takes a minute to install.

  #+begin_src emacs-lisp :tangle ./init.el
  ;; just so I dont have to look at Emacs default so long.
  (load "appearance")
  (load "themes-init")
  ;; this is a local theme I made. Code is in themes.
  ;; (load-theme 'strange-deeper-blue t)
  ;; (enable-theme 'strange-deeper-blue)
  (require 'modus-themes)
  #+end_src

**** Tweak the Modus theme

Tweak some Modus colors with different choices.

  #+begin_src emacs-lisp :tangle ./init.el
  ;; Faint yellow comments and a different shade of green for strings
  (setq modus-themes-common-palette-overrides
        '((string yellow-faint)
          (fringe unspecified)
          ;;(string green-warmer)
          (bg-region bg-lavender) ; try `bg-ochre' `bg-lavender', `bg-sage'
          (fg-region unspecified)
          (bg-paren-match bg-magenta-intense)
          (underline-paren-match fg-main)))
  (setq modus-themes-bold-constructs t
        modus-themes-italic-constructs t
        modus-themes-prompts '(intense-bold)
        modus-themes-completions 'intense-bold
        modus-themes-org-blocks 'tinted-background)

  (load-theme 'modus-vivendi-tinted t)             ; Dark theme
  #+end_src

**** load all the packages.

This loads the list from /mypackages/.  Install only cares if it is or not.
update will check everyone and make sure it is as new as possible.

  #+begin_src emacs-lisp :tangle ./init.el
  ;; Now we get to load our packages.
  (update-mypackages)
  ;;(install-mypackages) ; make sure, if it just starts up that it will
  #+end_src

**** Load everything else.

Load up the extensions, configurations and themes.

  #+begin_src emacs-lisp :tangle ./init.el
    ;; load up everything, compiling as needed.
    ;; still the simplest, even though just load could
    ;; work if auto compile was on for loading and saving..
    ;; theoretically, if everything was just right.
    ;; takes the same amount of time either way.

    ;; conditionally recompile and load these dirs.
    (require 'bytecompiledir)
    (byte-compile-directory (expand-file-name "./extensions" user-emacs-directory))
    (byte-compile-directory (expand-file-name "./config" user-emacs-directory))
    (byte-compile-directory (expand-file-name "./themes" user-emacs-directory))

    (load "display_hints") ; advice for various buffers.
  #+end_src

**** Turn some stuff on.

Evil mode, highlight line, golden ratio, visible bell, etc.

  #+begin_src emacs-lisp :tangle ./init.el

    ;;; Some global modes
    ;;; Turn on Vi mode.
    (evil-mode t)

    ;;; line highlight
    (global-hl-line-mode 1)

    ;;; Great for smaller screens. or bigger ones...
    (golden-ratio-mode)

    (setq visible-bell 1)

    ;; windmove navigation
    (windmove-default-keybindings)         ; shifted arrow keys
    (setq windmove-wrap-around t)

    (provide 'init)
    ;;; init.el ends here
#+end_src

*** Other Key Files

- config/ - Folder where all the real setup goes.

- extensions/ - Folder where non-elpa custom code goes.

- extensions/hydras.el - All the hydras

- config/vars.el - miscellaneous variable setting.

- config/keys.el - key bindings, mostly F keys.

- config/general-conf.el - key bindings for *SPC*.

- config/evil-leader.el - more key bindings, vi style.

** Mu4e - Mail
:PROPERTIES:
:CUSTOM_ID: mu4e---mail
:END:
I use Mu4e and isync for email. I can't imagine a better email client.
There is a reasonably basic mu4e configuration with multiple contexts.
There is a sample mbsyncrc file that can be used to configure
/isync/mbsync/.

=make mbsync= will copy a sample /.mbsyncrc/ to your home directory.

This is a bit easier now than it used to be. Arch Linux seems to install
/mu4e/ properly when /mu/ is installed with pacman.

I cannot speak about other distributions or OS'.

** Key mappings
:PROPERTIES:
:CUSTOM_ID: key-mappings
:END:
I have been switching over to General, I now have a *Space* key that is
the entry to point to the most used things and hydras. It has a lot of
overlap with my evil-leader menus.  I am slowly centralizing on General.

Its all up in the air as I am rearranging my Emacs UI at the moment.

I have an extensive menu system on Evil-leader which allows for *,w* for
write, *,q* delete-buffer, etc. the entire Hydra subsystem is available
at *,h*.

I use /which-key-posframe/ which is almost like hydra with all the
submenus. The only thing about posframe is that it seems to behave
badly in terminal mode. It just turns off instead of falling back to something
reasonable. I should just turn it off in the config when in terminal mode.

Mostly, the key mappings I added are non-intrusive. It is definitely a
good idea to go read /config/evil-leader-conf.el/ whether you want
/Evil/ key bindings or not. It will give you a good idea of
functionality to look for or map to your own keys in /keys.el/

** Additional software needed
:PROPERTIES:
:CUSTOM_ID: additional-packages-needed
:END:

I use isync/mbsync to retrieve mail, mu for indexes and mu4e as my email client.

I use language tool and hunspell for grammar and spelling. And finally I use the
Iosevka fonts.  I tend to use *ag* ie. The Silver searcher,  or a similar tool like *ripgrep*
will be needed.

Everything you really need, on Arch Linux, is this plus some hunspell dictionaries.

=yay -S mu isync languagetool hunspell ttf-iosevka ttc-iosevka the_silver_searcher=

Arch Linux has a lot of dictionaries, Just do =pacman -Ss hunspell= to see what is there.

*** Searching
- I use *ag*,  the silver searcher a lot.   =yay -S silver_searcher_searcher=
*** EMail
  - mu-git - on Arch linux
    - [[https://www.djcbsoftware.nl/code/mu/mu4e/Installation.html#Installation][install mu/mu-git/mu4e]] or maybe just do a =yay -S mu-git=.
  - isync (mbsync) - =yay -S isync=
  - =make mbsync= to copy a sample /.mbsyncrc/ for use with /isync/ to
    your home directory. Additional isync/mbsync/mu4e resources [[http://www.ict4g.net/adolfo/notes/2014/12/27/EmacsIMAP.html][are here:]]
*** Spelling and grammar.
  - languagetool
  - hunspell -- add dictionaries as needed.
  - hunspell dictionaries, I also have  [[https://github.com/EricGebhart/Hunspell-dictionaries][them here]]
*** Fonts
- Fonts /Iosevka Fonts/ [[https://github.com/be5invis/Iosevka][are here!]] Or just install the Arch Linux packages. One is community, the
  other AUR. =yay -S ttf-iosevka ttc-iosevka=

** Themes
:PROPERTIES:
:CUSTOM_ID: themes
:END:
I am using Modus Themes now. There are lots of other themes here, but
I'm tempted to remove all but my custom palette-theme extensions. Themes are
frequently are deleted from elpa and cause trouble during install with
package not found errors. The name must then be removed from
/mypackages.el/.

There Lots of themes from packages which is ironic considering I used the same theme
for 26 years and only recently switched from my own personal theme
strange-deeper-blue.

*** Palette themes
I also wrote a palette-themes.el which is a more general library
adapted from the solarized-theme. Palette-themes allow for the creation
of themes simply by defining a palette of colors. There are four
different variations of the solarized themes included.

** Install and update scripts/functions

This Emacs uses packages, so if that is all you want, read no further.

The packages of this Emacs configuration can be easily installed or
updated with a couple of commands. They can also  be
updated from outside of Emacs which makes it easier to
manage them.

*** Within Emacs
To use the package list for an update or an install is a
little bit nicer than =list-packages U x q=

=M-x install-mypackages=
or
=M-x update-mypackages=

*** Outside of Emacs

These are just to make sure things are current with git and all the Emacs
packages are installed and up to date. These commands are used by
*Emacsn* to manage Ericas-Emacs. Emacsn takes care of all of this for you.

The following scripts can be run to either install or update all of the
packages. The only difference is that install ignores packages that are
already installed. I think it makes very little difference in load time.
The update script adds a =git pull origin= before looking for
updates.

The nice thing about these is they run from the command line and are
done. They will also work just fine with a fresh vanilla install. The
caveat is they need --chdir, or to be in their proper folder upon
execution. Wherever this is installed is where /--chdir/ should be and
where the scripts live.

If they are in ~/.emacs.d/, then these would work.

#+begin_example
  `emacs --script install.el --chdir ~/.emacs.d`
  or
  `emacs --script update.el  --chdir ~/.emacs.d`

#+end_example

These are mostly for convenience, they can be called by a vanilla emacs from outside
of the install.  This is how *Emacsn* initializes and updates this distribution.
The update does also do a /git pull origin/ to checkout the latest version of it's self.

**** install.el

This is a simple script, with some user directory manipulation to fool emacs.
We make the current working directory the user directory.
Then we load the package list, and install them. Its just a little bit of what init.el does.

It is important to either invoke emacs where this script is, or to use the /--chdir/ option
to move emacs there.

#+begin_src emacs-lisp :tangle ./install.el
;;; install --- Installs packages for the first time.

;;; Commentary:
;;; Give a script to run to install all the packages the first time.
;;; Skips packages that are already installed.

;;; This will only work if run from the directory it is in.
;;; We change the user-emacs-directory to here so that Emacs will install
;;; its packages here.

;;; Install only looks for missing packages.  It does not check for upgrades.


;;; Code:

;;; Because when we get here, emacs is still pointing at its .emacs.d and we
;;; need it to point here. I'm not yet sure why it doesn't point here.
;;; chemacs must not set it when we use --script which means we can
;;; just run this with vanilla emacs and fool it to point here so
;;; our packages get installed.

;; trick emacs to be here, instead of it's .emacs.d
(setq user-emacs-directory default-directory)
(setq package-user-dir (expand-file-name "elpa" user-emacs-directory))

;; this is all we need. We just want to install all the packages.
(setq load-path
      (append (list
               (expand-file-name "./early-packages" user-emacs-directory)
	       )
	      load-path))

(load "mypackages")

(install-mypackages)

(provide 'install)
;;; install.el ends here
#+end_src

**** update.el

We make the current working directory the user directory.
We do a =git pull origin=.
Then we update or install all of the packages that need it.

It is important to either invoke emacs where this script is, or to use the /--chdir/ option
to move emacs there.

#+begin_src emacs-lisp :tangle ./update.el
;;; update --- Update packages, install missing packages.

;;; Commentary:
;;; Give a script to run to install all the packages the first time.
;;; This will only work if run from the directory it is in.
;;; We change the user-emacs-directory to here so that Emacs will install
;;; its packages here.

;;; The only difference between this and install.el is that install only looks
;;; for missing packages.  If they are installed it doesn't touch them.
;;; This takes a little more time, but checks to see if anything needs updating.
;;; install is faster if repeating an install step because of problems.


;;; Code:

;;; Because when we get here, emacs is still pointing at ~/.emacs.d and we
;;; need it to point here. I'm not yet sure why it doesn't point here.
;;; chemacs must not set it when we use --script which means we can
;;; just run this with vanilla emacs and fool it to point here so
;;; our packages get installed.

(shell-command "git pull origin main")

;; Trick emacs to be here, instead of .emacs.d
;; Requires being here or using emacs --chdir <here> to work.
(setq user-emacs-directory default-directory)
(setq package-user-dir (expand-file-name "elpa" user-emacs-directory))

(setq load-path
      (append (list
               (expand-file-name "./early-packages" user-emacs-directory)
	       )
	      load-path))

(load "mypackages")
(update-mypackages)

(provide 'update)
;;; update.el ends here
#+end_src

** Display Hints

Some ancient display hints I should probably revisit.

#+begin-src emacs-elisp :tangle early-packages/display-hints.el
;; set the initial frame size
;;(setq initial-frame-alist '((top . 20) (left . 0) (width . 200) (height . 60)))

;;Display-Buffer-Alist controls window display choices.
                                        ; display buffer alist is not really working in 24.3 as far
                                        ; as I can tell. some settings do work, but not all. Waiting for 24.4
                                        ; there is a window test function in functions to play with this.
                                        ; setting to nil at the end.

(add-to-list 'display-buffer-alist
             '("\\*.*\\*"
               (display-buffer-pop-up-window
                )
               (reusable-frames)
               (window-height . 5)))

(add-to-list 'display-buffer-alist
             '("\\*shell\\*"
               (
                display-buffer-in-previous-window
                display-buffer-below-selected
                )
               (reusable-frames)
               (window-height . 15)
               (window-width . 60)))

(add-to-list 'display-buffer-alist
             '("\\*help\\*"
               (
                display-buffer-reuse-window
                display-buffer-in-previous-window
                display-buffer-below-selected
                display-buffer-pop-up-window)
               (reusable-frames)
               (window-height . 20)))

(add-to-list 'display-buffer-alist
             '("\\*cider\\*"
               (
                display-buffer-below-selected
                display-buffer-reuse-window
                display-buffer-in-previous-window
                display-buffer-pop-up-window )
               (reusable-frames)
               (window-height . 20)))

(setq display-buffer-alist nil)
(setq checkdoc-arguments-in-order-flag nil)
#+end-src
